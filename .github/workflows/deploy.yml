name: Deploy to ECS
on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 289349975759.dkr.ecr.us-east-2.amazonaws.com
  IMAGE_NAME: sample-python_main
  ECS_CLUSTER_NAME: sample-ecs
  SERVICE_NAME: python-service
  TASK_DEFINITION_NAME: sample-python

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}       
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1    
        
      - name: Pull image from ECR
        run: docker pull $ECR_REGISTRY/$IMAGE_NAME:latest
      - name: Create task definition
        id: create_task_definition
        run: |
          task_def=$(cat task-def.json)
          task_def=${task_def/$IMAGE_NAME/$(echo "$ECR_REGISTRY/$IMAGE_NAME:latest")}
          aws ecs register-task-definition --cli-input-json file://task-def.json
      - name: Create service
        id: create_service
        run: |
          service=$(cat service.json)
          service=${service/$TASK_DEFINITION_NAME/$(echo "$TASK_DEFINITION_NAME")}
          aws ecs create-service --cli-input-json file://service.json
      - name: Wait for service deployment
        run: |
          aws ecs wait services-stable --cluster $ECS_CLUSTER_NAME --services $SERVICE_NAME
          # Wait for the service to reach a steady state before continuing
